#a native recursive implementation of 0-1 knapsack problem
#return the max value that can be put in a knapsack of capacity w

def knapSack(w,wt,val,n):
    if n==0 or w==0:
        return 0
    #if weight of the nth item is more than knapsack of capacity                                                   
    #then this item cannot be include in the optimal solution
    
    if(wt[n-1]>w):
        return knapSack(w,wt,val,n)
        #return the max of two cases:
        #1.nth item included
        #2.ot included
    else:
        return max(val[n-1]+knapSack(w-wt[n-1],wt,val,n-1),knapSack(w,wt,val,n-1))
   
val=[60,100,120]
wt=[10,20,30]
w=50
n=len(val)
print(knapSack(w,wt,val,n))
   
   
   
op:
220
        

----------------------------------------------------------------------------------------------------------------------------
def knapSack(w,wt,val,n):
    print(w)
    print(wt)
    print(val)
    print(n)
    print()
    if n==0 or w==0:
        return 0
    if(wt[n-1]>w):
        return knapSack(w,wt,val,n)
    else:
        return max(val[n-1]+knapSack(w-wt[n-1],wt,val,n-1),knapSack(w,wt,val,n-1))
        
val=[60,100,120]
wt=[10,20,30]
w=50
n=len(val)
print(knapSack(w,wt,val,n))






op:

50
[10, 20, 30]
[60, 100, 120]
3

20
[10, 20, 30]
[60, 100, 120]
2

0
[10, 20, 30]
[60, 100, 120]
1

20
[10, 20, 30]
[60, 100, 120]
1

10
[10, 20, 30]
[60, 100, 120]
0

20
[10, 20, 30]
[60, 100, 120]
0

50
[10, 20, 30]
[60, 100, 120]
2

30
[10, 20, 30]
[60, 100, 120]
1

20
[10, 20, 30]
[60, 100, 120]
0

30
[10, 20, 30]
[60, 100, 120]
0

50
[10, 20, 30]
[60, 100, 120]
1

40
[10, 20, 30]
[60, 100, 120]
0

50
[10, 20, 30]
[60, 100, 120]
0

220
